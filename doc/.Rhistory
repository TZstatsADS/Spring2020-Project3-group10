tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_test$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
if(run.cv){
model_best <- t[which.min(err_cv[,1])]
}
par_best <- list(t = 200,nfolds = 5)
tm_train=NA
time_start<-Sys.time()
fit_train_adv <- train_adv(h2o_train, par_best)
time_end<-Sys.time()
tm_train<-as.numeric(difftime(time_end, time_start))*60
save(fit_train_adv, file="../output/fit_train_adv.RData")
tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_test$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("h2o")){
install.packages("h2o")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(gbm)
library(h2o)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("h2o")){
install.packages("h2o")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(gbm)
library(h2o)
set.seed(0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
h2o.init()
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
n_files <- length(list.files(train_image_dir))
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
#inner points
for (i in 1:2500){
fiducial_pt_list[[i]] = fiducial_pt_list[[i]][c(19,21,23, 27,29,31,2,4,6,8,11,13,15,17,1,10,41,42,44,46,47,50,51,38,53,54,55,57,59,62,67,71,75),]
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
save(dat_train, file="../output/feature_train.RData")
save(dat_test, file="../output/feature_test.RData")
h2o.init()
h2o_train<-as.h2o(dat_train)
h2o_test<-as.h2o(dat_test)
source("../lib/train_adv.R")
source("../lib/test_adv.R")
if(run.cv){
model_best <- t[which.min(err_cv[,1])]
}
par_best <- list(t = 200,nfolds = 5)
tm_train=NA
time_start<-Sys.time()
fit_train_adv <- train_adv(h2o_train, par_best)
time_end<-Sys.time()
tm_train<-as.numeric(difftime(time_end, time_start))*60
save(fit_train_adv, file="../output/fit_train_adv.RData")
tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_test$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
tr<-group_by(info,emotion_idx)
train_idx <- sample_frac(tr, 0.8)$Index
test_idx <- setdiff(info$Index,train_idx)
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
save(dat_train, file="../output/feature_train.RData")
save(dat_test, file="../output/feature_test.RData")
h2o.init()
h2o_train<-as.h2o(dat_train)
h2o_test<-as.h2o(dat_test)
source("../lib/train_adv.R")
source("../lib/test_adv.R")
tm_train=NA
time_start<-Sys.time()
fit_train_adv <- train_adv(h2o_train, par_best)
time_end<-Sys.time()
tm_train<-as.numeric(difftime(time_end, time_start))*60
save(fit_train_adv, file="../output/fit_train_adv.RData")
tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_test$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
set.seed(0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
save(dat_train, file="../output/feature_train.RData")
save(dat_test, file="../output/feature_test.RData")
h2o.init()
h2o_train<-as.h2o(dat_train)
h2o_test<-as.h2o(dat_test)
source("../lib/train_adv.R")
source("../lib/test_adv.R")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("h2o")){
install.packages("h2o")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(gbm)
library(h2o)
set.seed(0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
t = c(50,100,150,200,250)
model_labels = paste("Number of trees in GBM function:", t)
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
load("C:/Users/59446/Documents/GitHub/Spring2020-Project3-group10/output/fiducial_pt_list.RData")
#inner points
for (i in 1:2500){
fiducial_pt_list[[i]] = fiducial_pt_list[[i]][c(19,21,23, 27,29,31,2,4,6,8,11,13,15,17,1,10,41,42,44,46,47,50,51,38,53,54,55,57,59,62,67,71,75),]
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
save(dat_train, file="../output/feature_train.RData")
save(dat_test, file="../output/feature_test.RData")
h2o.init()
h2o_train<-as.h2o(dat_train)
h2o_test<-as.h2o(dat_test)
source("../lib/train_adv.R")
source("../lib/test_adv.R")
source("../lib/cross_validation_adv.R")
t<-c(200,300)
if(run.cv){
err_cv <- matrix(0, nrow = length(t), ncol = 1)
for(i in 1:length(t)){
cat("layer size=", t[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, t[i])
save(err_cv, file="../output/err_cv_adv.RData")
}
}
if(run.cv){
model_best <- t[which.min(err_cv[,1])]
}
par_best <- list(t = model_best,nfolds = 5)
tm_train=NA
time_start<-Sys.time()
fit_train_adv <- train_adv(h2o_train, par_best)
time_end<-Sys.time()
tm_train<-as.numeric(difftime(time_end, time_start))*60
save(fit_train_adv, file="../output/fit_train_adv.RData")
tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_test$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
set.seed(123)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
save(dat_train, file="../output/feature_train.RData")
save(dat_test, file="../output/feature_test.RData")
tm_train=NA
time_start<-Sys.time()
fit_train_adv <- train_adv(h2o_train, par_best)
time_end<-Sys.time()
tm_train<-as.numeric(difftime(time_end, time_start))*60
save(fit_train_adv, file="../output/fit_train_adv.RData")
tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_test$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
source("../lib/train.R")
source("../lib/test.R")
par_best <- list(t = 250)
pred <- test(fit_train, dat_train)
pred<-test_adv(fit_train_adv$model, h2o_train)
p<-as.data.frame(pred[[1]])
p <- factor(p[[1]], levels = levels(dat_train$emotion_idx))
confusionMatrix(p, dat_test$emotion_idx)
confusionMatrix(p, dat_train$emotion_idx)
h2o.confusionMatrix(fit_train_adv$model, newdata = h2o_test)
m<-as.data.frame(h2o.confusionMatrix(fit_train_adv$model, newdata = h2o_test))
View(m)
m[['Error']][23]
p<-as.data.frame(pred)
View(p)
pred <- test_adv(fit_train_adv$model, h2o_test)
p<-as.data.frame(pred)
View(p)
p<-as.data.frame(pred[[1]])
View(p)
View(dat_test)
if(run.cv){
model_best <- t[which.min(err_cv[,1])]
}
par_best <- list(t = model_best,nfolds = 5)
tm_train=NA
time_start<-Sys.time()
fit_train_adv <- train_adv(h2o_train, par_best)
time_end<-Sys.time()
tm_train<-as.numeric(difftime(time_end, time_start))*60
save(fit_train_adv, file="../output/fit_train_adv.RData")
tm_test=NA
if(run.test){
load(file="../output/fit_train_adv.RData")
tm_test <- system.time(pred <- test_adv(fit_train_adv$model, h2o_test))
}
p<-as.data.frame(pred[[1]])
h2o.confusionMatrix(fit_train_adv$model, newdata = h2o_test)
p<-as.data.frame(pred[[1]])
confusion_matrix<-as.data_frame(h2o.confusionMatrix(fit_train_adv$model, newdata = h2o_test))
p<-as.data.frame(pred[[1]])
confusion_matrix<-as.data.frame(h2o.confusionMatrix(fit_train_adv$model, newdata = h2o_test))
confusion_matrix[['Error']][23]
p<-as.data.frame(pred[[1]])
confusion_matrix<-as.data.frame(h2o.confusionMatrix(fit_train_adv$model, newdata = h2o_test))
1-confusion_matrix[['Error']][23]
source("../lib/cross_validation_adv.R")
t<-c(50, 100, 200,300)
if(run.cv){
err_cv <- matrix(0, nrow = length(t), ncol = 1)
for(i in 1:length(t)){
cat("layer size=", t[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, t[i])
save(err_cv, file="../output/err_cv_adv.RData")
}
}
source("../lib/cross_validation_adv.R")
t<-c(50, 100, 200,300)
if(run.cv){
err_cv <- matrix(0, nrow = length(t), ncol = 1)
for(i in 1:length(t)){
cat("layer size=", t[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, t[i])
save(err_cv, file="../output/err_cv_adv.RData")
}
}
source("../lib/cross_validation_adv.R")
t<-c(50, 100, 200,300)
if(run.cv){
err_cv <- matrix(0, nrow = length(t), ncol = 1)
for(i in 1:length(t)){
cat("layer size=", t[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, t[i])
save(err_cv, file="../output/err_cv_adv.RData")
}
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("h2o")){
install.packages("h2o")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(gbm)
library(h2o)
set.seed(0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
load("C:/Users/59446/Documents/GitHub/Spring2020-Project3-group10/output/feature_test.RData")
load("C:/Users/59446/Documents/GitHub/Spring2020-Project3-group10/output/feature_train.RData")
h2o.init()
h2o_train<-as.h2o(dat_train)
h2o_test<-as.h2o(dat_test)
source("../lib/train_adv.R")
source("../lib/test_adv.R")
source("../lib/cross_validation_adv.R")
t<-c(100, 200,300)
if(run.cv){
err_cv <- matrix(0, nrow = length(t), ncol = 1)
for(i in 1:length(t)){
cat("layer size=", t[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, t[i])
save(err_cv, file="../output/err_cv_adv.RData")
}
}
